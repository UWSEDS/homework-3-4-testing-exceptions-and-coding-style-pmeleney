"""
test_dataframe contains unit tests for the dataframe created by dataframe.py
the function run_unit_tests should return True if all tests are passed
otherwise an error is raised with relevant information.
"""


def run_unit_tests(dataframe):

    """Unit tests for the dataframe.py file that has been read into the system.
    Tests: (1) that the dataframe does not contain any nan values
    (2) ensures that the dataframe has at least one row
    (3) ensures that the columns are correctly named
    (4) ensures that the columns are of the correct type

    Args:
        :param dataframe:

    Returns:
        :return: bool: True if all tests passed"""


    if dataframe.isnull().any().any():
        raise ValueError("Dataframe contains a nan value.")
    else:
        pass

    if dataframe.shape[0] < 1:
        raise ValueError("Dataframe must have at least one row.")
    else:
        pass

    expected_col_names = [
        'SUMLEV',
        'REGION',
        'DIVISION',
        'STATE',
        'NAME',
        'CENSUS2010POP',
        'ESTIMATESBASE2010',
        'POPESTIMATE2010',
        'POPESTIMATE2011',
        'POPESTIMATE2012',
        'POPESTIMATE2013',
        'POPESTIMATE2014',
        'POPESTIMATE2015',
        'POPESTIMATE2016',
        'POPESTIMATE2017',
        'POPESTIMATE2018',
        'NPOPCHG_2010',
        'NPOPCHG_2011',
        'NPOPCHG_2012',
        'NPOPCHG_2013',
        'NPOPCHG_2014',
        'NPOPCHG_2015',
        'NPOPCHG_2016',
        'NPOPCHG_2017',
        'NPOPCHG_2018',
        'BIRTHS2010',
        'BIRTHS2011',
        'BIRTHS2012',
        'BIRTHS2013',
        'BIRTHS2014',
        'BIRTHS2015',
        'BIRTHS2016',
        'BIRTHS2017',
        'BIRTHS2018',
        'DEATHS2010',
        'DEATHS2011',
        'DEATHS2012',
        'DEATHS2013',
        'DEATHS2014',
        'DEATHS2015',
        'DEATHS2016',
        'DEATHS2017',
        'DEATHS2018',
        'NATURALINC2010',
        'NATURALINC2011',
        'NATURALINC2012',
        'NATURALINC2013',
        'NATURALINC2014',
        'NATURALINC2015',
        'NATURALINC2016',
        'NATURALINC2017',
        'NATURALINC2018',
        'INTERNATIONALMIG2010',
        'INTERNATIONALMIG2011',
        'INTERNATIONALMIG2012',
        'INTERNATIONALMIG2013',
        'INTERNATIONALMIG2014',
        'INTERNATIONALMIG2015',
        'INTERNATIONALMIG2016',
        'INTERNATIONALMIG2017',
        'INTERNATIONALMIG2018',
        'DOMESTICMIG2010',
        'DOMESTICMIG2011',
        'DOMESTICMIG2012',
        'DOMESTICMIG2013',
        'DOMESTICMIG2014',
        'DOMESTICMIG2015',
        'DOMESTICMIG2016',
        'DOMESTICMIG2017',
        'DOMESTICMIG2018',
        'NETMIG2010',
        'NETMIG2011',
        'NETMIG2012',
        'NETMIG2013',
        'NETMIG2014',
        'NETMIG2015',
        'NETMIG2016',
        'NETMIG2017',
        'NETMIG2018',
        'RESIDUAL2010',
        'RESIDUAL2011',
        'RESIDUAL2012',
        'RESIDUAL2013',
        'RESIDUAL2014',
        'RESIDUAL2015',
        'RESIDUAL2016',
        'RESIDUAL2017',
        'RESIDUAL2018',
        'RBIRTH2011',
        'RBIRTH2012',
        'RBIRTH2013',
        'RBIRTH2014',
        'RBIRTH2015',
        'RBIRTH2016',
        'RBIRTH2017',
        'RBIRTH2018',
        'RDEATH2011',
        'RDEATH2012',
        'RDEATH2013',
        'RDEATH2014',
        'RDEATH2015',
        'RDEATH2016',
        'RDEATH2017',
        'RDEATH2018',
        'RNATURALINC2011',
        'RNATURALINC2012',
        'RNATURALINC2013',
        'RNATURALINC2014',
        'RNATURALINC2015',
        'RNATURALINC2016',
        'RNATURALINC2017',
        'RNATURALINC2018',
        'RINTERNATIONALMIG2011',
        'RINTERNATIONALMIG2012',
        'RINTERNATIONALMIG2013',
        'RINTERNATIONALMIG2014',
        'RINTERNATIONALMIG2015',
        'RINTERNATIONALMIG2016',
        'RINTERNATIONALMIG2017',
        'RINTERNATIONALMIG2018',
        'RDOMESTICMIG2011',
        'RDOMESTICMIG2012',
        'RDOMESTICMIG2013',
        'RDOMESTICMIG2014',
        'RDOMESTICMIG2015',
        'RDOMESTICMIG2016',
        'RDOMESTICMIG2017',
        'RDOMESTICMIG2018',
        'RNETMIG2011',
        'RNETMIG2012',
        'RNETMIG2013',
        'RNETMIG2014',
        'RNETMIG2015',
        'RNETMIG2016',
        'RNETMIG2017',
        'RNETMIG2018']

    df_col_dtypes = [
        'int64',
        'object',
        'object',
        'int64',
        'object',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'int64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64',
        'float64']

    for col in dataframe.columns:
        if col not in expected_col_names:
            raise ValueError("Unexpected column in dataframe: ", col)

    for col in expected_col_names:
        if col not in dataframe.columns:
            raise ValueError("Expected column missing from dataframe: ", col)

    dict_dtypes = dict(zip(expected_col_names, df_col_dtypes))

    for col in dict_dtypes.keys():
        if dict_dtypes[col] != dataframe[col].dtype:
            raise ValueError("One or more column(s) are not of expected type.", col)
        else:
            pass

    return True
